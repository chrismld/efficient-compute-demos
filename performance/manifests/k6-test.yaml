apiVersion: v1
kind: ConfigMap
metadata:
  name: k6-load-test-script
data:
  load-test.js: |
    import http from 'k6/http';
    import { check, sleep } from 'k6';

    export const options = {
      scenarios: {
        constant_load: {
          executor: 'constant-vus',
          vus: 12,
          duration: '3m',
        },
      },
      thresholds: {
        http_req_failed: ['rate<0.05'],  // Allow 5% failure rate
        http_req_duration: ['p(99)<45000'],  // P99 under 45 seconds
      },
    };

    const BASE_URL = __ENV.BASE_URL || 'http://log-aggregator-service:8080';

    // Generate moderate-sized log batches
    function generateMassiveLogBatch() {
      const logs = [];
      // 3MB payload - balanced for performance testing
      const targetPayloadSizeMB = 3;
      const approxLogSizeBytes = 5000;
      const logsPerBatch = Math.floor((targetPayloadSizeMB * 1024 * 1024) / approxLogSizeBytes);

      for (let i = 0; i < logsPerBatch; i++) {
        // Moderate repetition - 30x
        const longMessage = `This is a detailed log message with extensive repetitive content that will compress well but requires significant CPU processing. Request ID: ${i}. User performed action on resource. Status: success. Additional context: processing completed successfully with no errors encountered during execution. The system processed the request through multiple layers including authentication, authorization, validation, business logic execution, database operations, cache updates, and response formatting. Performance metrics were collected at each stage. Timestamps were recorded. Audit logs were generated. Notifications were queued. Background jobs were scheduled. `.repeat(30);
        
        logs.push({
          timestamp: new Date().toISOString(),
          level: 'info',
          message: longMessage,
          metadata: {
            service: 'api-gateway',
            request_id: `req-${Math.random().toString(36).substring(2, 15)}`,
            user_id: Math.floor(Math.random() * 100000),
            session_id: `sess-${Math.random().toString(36).substring(2, 15)}`,
            ip_address: `192.168.${Math.floor(Math.random() * 255)}.${Math.floor(Math.random() * 255)}`,
            user_agent: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
            endpoint: '/api/v1/users/profile',
            method: 'GET',
            status_code: 200,
            duration_ms: Math.floor(Math.random() * 500),
            bytes_sent: Math.floor(Math.random() * 10000),
            bytes_received: Math.floor(Math.random() * 50000),
            trace_id: `trace-${Math.random().toString(36).substring(2, 15)}`,
            span_id: `span-${Math.random().toString(36).substring(2, 15)}`,
            parent_span_id: `parent-${Math.random().toString(36).substring(2, 15)}`,
            tags: ['production', 'critical', 'monitored', 'traced', 'logged'],
            environment: 'production',
            region: 'us-east-1',
            availability_zone: 'us-east-1a',
            instance_id: `i-${Math.random().toString(36).substring(2, 15)}`,
            container_id: `container-${Math.random().toString(36).substring(2, 15)}`,
          },
        });
      }
      return logs;
    }

    export default function () {
      const payload = JSON.stringify({
        logs: generateMassiveLogBatch(),
      });

      const params = {
        headers: {
          'Content-Type': 'application/json',
        },
        timeout: '50s',  // Generous timeout for compression work
      };

      const response = http.post(`${BASE_URL}/api/logs/batch`, payload, params);

      check(response, {
        'status is 200': (r) => r.status === 200,
        'has processing time': (r) => {
          try {
            const body = JSON.parse(r.body);
            return body.processing_time !== undefined;
          } catch (e) {
            return false;
          }
        },
      });
      
      // Small pause between requests to prevent overwhelming single pod
      sleep(0.5);
    }
---
apiVersion: k6.io/v1alpha1
kind: TestRun
metadata:
  name: log-aggregator-x86
spec:
  quiet: "false"
  cleanup: post
  parallelism: 8  # Reduced from 12 to be gentler on single pod
  script:
    configMap:
      name: k6-load-test-script
      file: load-test.js
  runner:
    image: grafana/k6:latest
    resources:
      requests:
        cpu: 500m
        memory: 512Mi
      limits:
        memory: 1Gi
    env:
    - name: BASE_URL
      value: "http://log-aggregator-x86:8080"
---
apiVersion: k6.io/v1alpha1
kind: TestRun
metadata:
  name: log-aggregator-arm
spec:
  quiet: "false"
  cleanup: post
  parallelism: 8  # Reduced from 12 to be gentler on single pod
  script:
    configMap:
      name: k6-load-test-script
      file: load-test.js
  runner:
    image: grafana/k6:latest
    resources:
      requests:
        cpu: 500m
        memory: 512Mi
      limits:
        memory: 1Gi
    env:
    - name: BASE_URL
      value: "http://log-aggregator-arm:8080"
