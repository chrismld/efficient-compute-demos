apiVersion: apps/v1
kind: Deployment
metadata:
  name: montecarlo-pi
spec:
  selector:
    matchLabels:
      app: montecarlo-pi
  template:
    metadata:
      labels:
        app: montecarlo-pi
    spec:
      nodeSelector:
        intent: multiarch
        karpenter.sh/capacity-type: on-demand
        eks.amazonaws.com/instance-family: "c6i"
      tolerations:
      - key: multiarch
        operator: Exists
      containers:
      - name: montecarlo-pi
        image: public.ecr.aws/chrismld/montecarlo-pi
        imagePullPolicy: Always
        ports:
        - name: http
          containerPort: 8080
        resources:
          requests:
            cpu: 900m
            memory: 512Mi
          limits:
            cpu: 900m
            memory: 512Mi
---
apiVersion: v1
kind: Service
metadata:
  name: montecarlo-pi
  labels:
    app: montecarlo-pi
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-scheme: internet-facing
spec:
  ports:
  - name: http
    port: 80
    protocol: TCP
    targetPort: 8080
  selector:
    app: montecarlo-pi
  type: LoadBalancer
---
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: montecarlo-pi
  labels:
    app: montecarlo-pi
    release: prometheus
spec:
  selector:
    matchLabels:
      app: montecarlo-pi
  endpoints:
  - port: http
---
apiVersion: keda.sh/v1alpha1
kind: ScaledObject
metadata:
  name: montecarlo-pi-latency
spec:
  scaleTargetRef:
    name: montecarlo-pi
  minReplicaCount: 1
  maxReplicaCount: 10
  advanced:
    horizontalPodAutoscalerConfig: 
      behavior:
        scaleUp:
          stabilizationWindowSeconds: 0
          policies:
          - type: Percent
            value: 100
            periodSeconds: 5
        scaleDown:
          stabilizationWindowSeconds: 180
          policies:
          - type: Percent
            value: 100
            periodSeconds: 30
  triggers:
  - type: prometheus
    metadata:
      serverAddress: http://prometheus-kube-prometheus-prometheus.monitoring.svc:9090
      metricName: monte_carlo_latency_seconds
      threshold: "0.5" # SLA is 0.8 or 800ms really, but we want to scale out before
      query: |
        histogram_quantile(0.90, sum(rate(monte_carlo_latency_seconds_bucket{status="200"}[1m])) by (le))